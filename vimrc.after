let g:airline_powerline_fonts = 1

" Automatically removing all trailing whitespace
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  %s/\t/  /ge
  call cursor(l, c)
endfun
let g:ctrlp_root_markers = ['Gemfile', '.git']
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/vendor/bundle/*,*/.bundle/*,*/.git/*,*/doc/app/*,*/spec/reports/*

set cursorline
hi CursorLine term=underline cterm=underline
:highlight Search cterm=underline ctermfg=yellow ctermbg=black

autocmd BufWritePre *.js,*.ebnf,*.css,*.scss,*.ts :call <SID>StripTrailingWhitespaces()
au! BufRead,BufNewFile *.hamlc setfiletype haml
autocmd! BufNewFile,BufRead *.vs,*.fs set ft=glsl

au! BufRead,BufNewFile *.ebnf setfiletype ebnf

map <Leader>rt :!silent ctags --options=ctags_options .<CR><CR>

" Set leader to , just for the example but it could be anything you
" choose.
map <Leader>h1 VypVr=
map <Leader>h2 VypVr-

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS ts=2 sw=2 sts=2
autocmd FileType haml setlocal shiftwidth=4 tabstop=4
autocmd FileType css set ts=4 sw=4 sts=4      " CSS:        tab = 4 spaces
autocmd FileType scss set ts=4 sw=4 sts=4     " SASS:       tab = 4 spaces

let g:tlist_coffee_settings = 'coffee;f:function;v:variable'
let g:jsx_ext_required = 0

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Jump to next error of 'ale' (eslins, sasslint, etc)
nmap <silent> <Leader><  <Plug>(ale_previous_wrap)
nmap <silent> <Leader>>  <Plug>(ale_next_wrap)
nmap <silent> <Leader>?  <Plug>(ale_detail)

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>


" Move lines up and down using Alt + j/k
" http://stackoverflow.com/a/15399297
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==

inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi

vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

map <Leader>et :call VimuxRunCommand('~/dotfiles/scripts/elixir_tests ' . expand('%:p') . ':' . line('.'))<CR>
map <Leader>ef :call VimuxRunCommand('~/dotfiles/scripts/elixir_tests ' . expand('%:p'))<CR>
map <Leader>ea :call VimuxRunCommand('~/dotfiles/scripts/elixir_tests all')<CR>
map <Leader>el :call VimuxRunCommand('~/dotfiles/scripts/elixir_tests')<CR>

map <Leader>pl :execute 'silent !plantuml ' . expand('%') . ' &'<CR>:redraw!<CR>
map <Leader>v :call VimuxRunLastCommand()<CR>

cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

autocmd FileType make setlocal noexpandtab

let g:prettier#autoformat = 0
let g:prettier#config#trailing_comma = 'none'
let g:prettier#config#parser = 'babylon'
let g:prettier#config#parser = 'babylon'
let g:prettier#config#arrow_parens = 'avoid'
let g:prettier#config#jsx_bracket_same_line = 'false'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#single_quote = 'false'
let g:prettier#config#prose_wrap = 'always'

autocmd BufWritePre *.js,*.json,*.md PrettierAsync

let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

function! s:goyo_enter()
  Limelight
  set scrolloff=999
endfunction

function! s:goyo_leave()
  Limelight!
  set scrolloff=3
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

color darcula
